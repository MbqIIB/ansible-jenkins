---
# Start the process of initialising the plugins
- name: plugins | ensure user is logged in using secure details
  command: "jenkins-cli login --username={{ jenkins_cli_user }} --password={{ jenkins_cli_pass }}"
  register: jenkins_user_authenticated
  when: not((jenkins_cli_user is undefined) or (jenkins_cli_user is none) or (jenkins_cli_user|trim == '')) and not((jenkins_cli_pass is undefined) or (jenkins_cli_pass is none) or (jenkins_cli_pass|trim == ''))
  tags:
    - plugins
    - jenkins

- name: plugins | ensure user is logged in using ssh key
  command: "jenkins-cli login"
  become: yes
  become_user: jenkins
  when: (jenkins_cli_user is undefined or jenkins_cli_user is none or jenkins_cli_user|trim == '') and (jenkins_cli_pass is undefined or jenkins_cli_pass is none or jenkins_cli_pass|trim == '')
  register: jenkins_user_ssh
  ignore_errors: True
  tags:
    - plugins
    - jenkins

- name: plugins | ensure jenkins updates folder exists.
  file:
    path: "{{ jenkins_home }}/updates"
    owner: jenkins
    group: jenkins
    mode: 0755
    state: directory
  register: jenkins_plugins_folder_create

- name: plugins | get jenkins updates information
  shell: curl -L https://updates.jenkins-ci.org/update-center.json | sed '1d;$d' > "{{ jenkins_home }}/updates/default.json"
  args:
    creates: "{{ jenkins_home }}/updates/default.json"
  register: jenkins_updates_download
  tags:
    - plugins
    - jenkins

- name: Permissions for default.json updates info.
  file:
    path: "{{ jenkins_home }}/updates/default.json"
    owner: jenkins
    group: jenkins
    mode: 0755
  when: jenkins_plugins_folder_create|changed or jenkins_updates_download|changed
# 
# - debug: var=jenkins_user_ssh|success
# - debug: var=jenkins_user_authenticated|skipped
# - debug: var=jenkins_plugins

- name: plugins | get list of current installed plugins (default user)
  shell: "jenkins-cli list-plugins | cut -f 1 -d ' '"
  become: yes
  become_user: jenkins
  when: jenkins_user_ssh|success and jenkins_user_authenticated|skipped and (jenkins_plugins is defined and jenkins_plugins|length > 0)
  register: jenkins_plugins_installed
  tags:
    - plugins
    - jenkins

- name: plugins | ensure missing plugins are installed (default user)
  shell: "jenkins-cli install-plugin {{ item }}"
  become: yes
  become_user: jenkins
  when: jenkins_user_ssh|success and jenkins_user_authenticated|skipped and jenkins_plugins_installed|changed and jenkins_plugins_installed.stdout.find('{{ item }}') == -1
  with_items: jenkins_plugins
  notify:
    - restart jenkins
  tags:
    - jenkins
    - plugins

- name: plugins | list plugins to be updated (default user)
  shell: jenkins-cli list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
  become: yes
  become_user: jenkins
  when: jenkins_user_ssh|success and jenkins_user_authenticated|skipped
  register: jenkins_plugins_updates
  tags:
    - jenkins
    - plugins

- name: plugins | ensure all plugins are up to date (default user)
  shell: "jenkins-cli install-plugin {{ jenkins_plugins_updates.stdout }}"
  become: yes
  become_user: jenkins
  when: jenkins_user_ssh|success and jenkins_user_authenticated|skipped and not((jenkins_plugins_updates.stdout is undefined) or (jenkins_plugins_updates.stdout is none) or (jenkins_plugins_updates.stdout|trim == ''))
  notify:
    - restart jenkins
  tags:
    - jenkins
    - plugins

- name: plugins | get list of current installed plugins (autherised user)
  shell: "jenkins-cli list-plugins | cut -f 1 -d ' '"
  register: jenkins_plugins_installed
  when: jenkins_user_authenticated|skipped == False and (jenkins_plugins is defined and jenkins_plugins|length > 0)
  tags:
    - plugins
    - jenkins

- name: plugins | ensure missing plugins are installed (autherised user)
  shell: "jenkins-cli install-plugin {{ item }}"
  when: jenkins_user_authenticated|skipped == False and jenkins_plugins_installed|changed and jenkins_plugins_installed.stdout.find('{{ item }}') == -1
  with_items: jenkins_plugins
  notify:
    - restart jenkins
  tags:
    - jenkins
    - plugins

- name: plugins | list plugins to be updated (autherised user)
  shell: jenkins-cli list-plugins | grep ')$' | cut -f 1 -d ' ' | sed ':a;N;$!ba;s/\n/ /g'
  when: jenkins_user_authenticated|skipped == False
  register: jenkins_plugins_updates
  tags:
    - jenkins
    - plugins

- name: plugins | ensure all plugins are up to date (autherised user)
  shell: "jenkins-cli install-plugin {{ jenkins_plugins_updates.stdout }}"
  when: jenkins_user_authenticated|skipped == False and not((jenkins_plugins_updates.stdout is undefined) or (jenkins_plugins_updates.stdout is none) or (jenkins_plugins_updates.stdout|trim == ''))
  notify:
    - restart jenkins
  tags:
    - jenkins
    - plugins
